@model IEnumerable<VehicleRentalAPI.Models.Rental>

@{
    ViewData["Title"] = "Manage Rentals";
}
<div class="modern-table-container">
    <h2 class="table-title">Rental Management</h2>
    

<!-- Add New Rental Button -->
<button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#addRentalModal">Add New Rental</button>

<!-- Rentals Table -->
<table class="modern-table">
    <thead>
        <tr>
           
            <th>Customer</th>
            <th>Vehicle</th>
            <th>Rental Date</th>
            <th>Return Date</th>
            <th>Total Days</th>
            <th>Total Amount</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var rental in Model)
        {
            <tr>
                
                <td>@rental.Customer.Name</td>
                <td>@rental.Vehicle.Model</td>
                <td>@rental.RentalDate.ToShortDateString()</td>
                <td>@(rental.ReturnDate.HasValue ? rental.ReturnDate.Value.ToShortDateString() : "N/A")</td>
                <td>@((rental.ReturnDate.HasValue ? (rental.ReturnDate.Value - rental.RentalDate).Days + 1 : 0))</td>
                <td>@rental.TotalAmount</td>
                <td>

                    <button type="button" class="btn btn-danger" onclick="confirmCancel(@rental.RentalID)">Cancel</button>
                
                </td>
            </tr>
        }
    </tbody>
</table>
</div>
<!-- Add Rental Modal -->
<div class="modal fade" id="addRentalModal" tabindex="-1" aria-labelledby="addRentalModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="Create" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="addRentalModalLabel">Add New Rental</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="CustomerID" class="form-label">Customer</label>
                        <select class="form-control" id="CustomerID" name="CustomerID" required>
                            <option value="">Select Customer</option>
                            @foreach (var customer in ViewBag.Customers)
                            {
                                <option value="@customer.CustomerID">@customer.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="VehicleID" class="form-label">Vehicle</label>
                        <select class="form-control" id="VehicleID" name="VehicleID" required>
                            <option value="">Select Vehicle</option>
                            @foreach (var vehicle in ViewBag.Vehicles)
                            {
                                <option value="@vehicle.VehicleID" data-price="@vehicle.PricePerDay">
                                    @($"{vehicle.Model} RM{vehicle.PricePerDay}/per day")
                                </option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="RentalDate" class="form-label">Rental Date</label>
                        <input type="date" class="form-control" id="RentalDate" name="RentalDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" required>
                    </div>
                    <div class="mb-3">
                        <label for="ReturnDate" class="form-label">Return Date</label>
                        <input type="date" class="form-control" id="ReturnDate" name="ReturnDate" required>
                    </div>
                    <div class="mb-3">
                        <label for="TotalDays" class="form-label">Total Days</label>
                        <input type="text" class="form-control" id="TotalDays" name="TotalDays" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="TotalAmount" class="form-label">Total Amount</label>
                        <input type="text" class="form-control" id="TotalAmount" name="TotalAmount" readonly>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Add Rental</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- SweetAlert for Feedback -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".modal").forEach(modal => {
            const rentalDateInput = modal.querySelector(".modal-body #RentalDate");
            const returnDateInput = modal.querySelector(".modal-body #ReturnDate");
            const vehicleSelect = modal.querySelector(".modal-body #VehicleID");
            const totalDaysInput = modal.querySelector(".modal-body #TotalDays");
            const totalAmountInput = modal.querySelector(".modal-body #TotalAmount");
            const addRentalForm = modal.querySelector("form"); // Target the form inside the modal

            // Function to calculate totals
            function calculateTotals() {
                const rentalDate = new Date(rentalDateInput.value);
                const returnDate = new Date(returnDateInput.value);
                const pricePerDay = vehicleSelect.selectedOptions[0]?.dataset.price;

                if (!isNaN(rentalDate) && !isNaN(returnDate) && pricePerDay) {
                    const totalDays = (returnDate - rentalDate) / (1000 * 60 * 60 * 24) + 1;
                    if (totalDays > 0) {
                        totalDaysInput.value = totalDays;
                        totalAmountInput.value = (totalDays * parseFloat(pricePerDay)).toFixed(2);
                    } else {
                        totalDaysInput.value = 0;
                        totalAmountInput.value = 0;
                    }
                }
            }

            // Add event listeners for inputs to trigger total calculations
            rentalDateInput?.addEventListener("change", calculateTotals);
            returnDateInput?.addEventListener("change", calculateTotals);
            vehicleSelect?.addEventListener("change", calculateTotals);

            // Add SweetAlert confirmation on form submission
            addRentalForm?.addEventListener("submit", function (event) {
                event.preventDefault(); // Prevent the form from submitting immediately

                Swal.fire({
                    title: 'Confirm Add Rental',
                    text: `This rental cannot be modified after creation. Proceed to add?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, Add Rental!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        addRentalForm.submit(); // Submit the form if the user confirms
                    }
                });
            });
        });
    });
</script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
    @if (TempData["SuccessMessage"] != null)
    {
        <text>
                    Swal.fire({
                        icon: 'success',
                    title: 'Success',
                    text: '@TempData["SuccessMessage"]',
                    timer: 3000,
                    timerProgressBar: true
                        });
        </text>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <text>
                    Swal.fire({
                        icon: 'error',
                    title: 'Error',
                    text: '@TempData["ErrorMessage"]',
                    timer: 3000,
                    timerProgressBar: true
                        });
        </text>
    }
        });
</script>




<script>
    function confirmCancel(rentalId) {
        console.log("Rental ID to cancel:", rentalId); // Debug log
        Swal.fire({
            title: 'Confirm Cancellation',
            text: "Are you sure you want to cancel this rental? This action cannot be undone.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, Cancel it!',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/Rentals/Delete/${rentalId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            Swal.fire('Cancelled!', 'The rental has been cancelled.', 'success')
                                .then(() => location.reload());
                        } else {
                            Swal.fire('Error!', 'Failed to cancel the rental. Please try again.', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire('Error!', 'An unexpected error occurred. Please try again.', 'error');
                    });
            }
        });
    }

</script>
